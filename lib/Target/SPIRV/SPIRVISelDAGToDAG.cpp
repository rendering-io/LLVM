//===- SPIRVISelDAGToDAG.cpp - A dag to dag inst selector for SPIR-V ------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
///
/// \file
/// \brief This file defines an instruction selector for the SPIRV target.
///
//===----------------------------------------------------------------------===//

#include "SPIRV.h"
#include "MCTargetDesc/SPIRVMCTargetDesc.h"
#include "SPIRVTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Function.h" // To access function attributes.
#include "llvm/Support/Debug.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "wasm-isel"

//===--------------------------------------------------------------------===//
/// SPIRV-specific code to select SPIRV machine instructions for
/// SelectionDAG operations.
///
namespace {
class SPIRVDAGToDAGISel final : public SelectionDAGISel {
  /// Keep a pointer to the SPIRVSubtarget around so that we can make the
  /// right decision when generating code for different targets.
  const SPIRVSubtarget *Subtarget;

  bool ForCodeSize;

public:
  SPIRVDAGToDAGISel(SPIRVTargetMachine &tm,
                          CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(tm, OptLevel), Subtarget(nullptr), ForCodeSize(false) {
  }

  StringRef getPassName() const override {
    return "SPIRV Instruction Selection";
  }

  bool runOnMachineFunction(MachineFunction &MF) override {
    ForCodeSize =
        MF.getFunction()->hasFnAttribute(Attribute::OptimizeForSize) ||
        MF.getFunction()->hasFnAttribute(Attribute::MinSize);
    Subtarget = &MF.getSubtarget<SPIRVSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *Node) override;

// Include the pieces autogenerated from the target description.
#include "SPIRVGenDAGISel.inc"

private:
  // add select functions here...
};
} // end anonymous namespace

void SPIRVDAGToDAGISel::Select(SDNode *Node) {
  // Dump information about the Node being selected.
  DEBUG(errs() << "Selecting: ");
  DEBUG(Node->dump(CurDAG));
  DEBUG(errs() << "\n");

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    DEBUG(errs() << "== "; Node->dump(CurDAG); errs() << "\n");
    Node->setNodeId(-1);
    return;
  }

  // Few custom selection stuff.
  EVT VT = Node->getValueType(0);

  switch (Node->getOpcode()) {
  default:
    break;
    // If we need SPIRV-specific selection, it would go here.
    (void)VT;
  }

  // Select the default instruction.
  SelectCode(Node);
}

/// This pass converts a legalized DAG into a SPIRV-specific DAG, ready
/// for instruction scheduling.
FunctionPass *llvm::createSPIRVISelDag(SPIRVTargetMachine &TM,
                                             CodeGenOpt::Level OptLevel) {
  return new SPIRVDAGToDAGISel(TM, OptLevel);
}
